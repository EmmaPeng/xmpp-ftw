<html>
    <head>
        <script type="text/javascript" src="/socket.io/socket.io.js"></script>
        <script type="text/javascript" src="/client.js"></script>
        <style>
            pre { 
                border: 1px solid #000;
                margin: 5px;
                background-color: #ddd;
                padding-top: 15px;
            }
            a { 
                text-decoration: none;
            }
            .subtitle {
                font-weight: bold;
                font-size: 1.6em;
            }
        </style>
        <script src="//code.jquery.com/jquery-1.9.1.min.js"></script>
        <script type="text/javascript">
        $(document).ready(function() {
            $("h2, h3, h4").each(function(i) {
                var current = $(this);
                current.attr("id", "title" + i);
                var indent = ''
                if (current[0].nodeName == 'H3') indent = '&nbsp;&nbsp;&nbsp;&nbsp;'
                if (current[0].nodeName == 'H4') indent = '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'
                $("#toc").append(indent + "<a id='link" + i + "' href='#title" +
                    i + "' title='" + current.attr("tagName") + "'>" + 
                    current.html() + "</a><br/>")
                current.append(' <a href="#top">&uarr;</a>')
            });
            $("#toc").before('<h2><a name="top"></a>Contents</h2>')
        })
        </script>
    </head>
    <body>
        <h1>XMPP For The Web/Win ::: XMPP-FTW</h1>
        <p class="subtitle">Welcome to XMPP over websockets using JSON</p>
        <p>See <a href="https://github.com/lloydwatkin/xmpp-ftw">https://github.com/lloydwatkin/xmpp-ftw</a> 
        for more details.</p>
        
        <div id="toc"></div>
        
        <h2>JIDs</h2>
        
        <p>JIDs are always sent as an object as follows:</p>
        <pre class="example">
        { 
            node: 'user',
            domain: 'example.com',
            resource: 'lounge'
        }
        </pre>
        
        <h2>Errors</h2>
        
        <p>Errors are delivered in the following form:</p>
        
        <pre class="example">
        {
            type: 'auth',
          [ condition: 'forbidden', ]
          [ description: 'Only owners can configure rooms' ]
        }
        </pre>
        
        <h2>Authentication</h2>
 
        <h3>Login</h3>
        <pre class="out" message="xmpp.login">
        socket.emit('xmpp.login', {jid: 'test@example.com', password: 'password'})
        </pre>
        <p>You can also add an optional parameter of <i>resource</i>, if not provided the XMPP 
           server will add this automatically.</p>

        <h2>Messaging</h2>

        <h3>Send a message</h3>
        <pre class="out" message="xmpp.chat.message"">
        socket.emit('xmpp.chat.message', {to: 'other@example.com', message: 'Hello world'})
        </pre>

        <h3>Receive a chat message</h3>
        <pre class="in" message="xmpp.chat.message">
        socket.on('xmpp.chat.message', function(data) {
            console.log('Got message from ' + data.from)
            console.log('Content was: ' + data.content)
        })
        </pre>

        <h2>Presence</h2>

        <h3>Set presence</h3>
        <pre class="out" message="xmpp.presence">
        socket.emit('xmpp.presence', {show: 'online', status: "I'm using this script!", priority: 10})
        </pre>
        <p>Each of the parameters for presence are <i>optional</i>.</p>
        
        <h3>Receive presence</h3>
        <pre class="in" message="xmpp.presence">
        socket.on('xmpp.presence', function(data) { 
            console.log(data); 
            /*
              { show: 'away', status: "I'm going away", priority: 10 }
              ...each of these are optional...
             */
        })
        </pre>
        
        <h3>Directed presence</h3>
        
        <pre class="out" message="xmpp.presence.get">
        socket.emit('xmpp.presence.get', { to: 'user@example.com' })
        </pre>

        <h3>Go offline</h3>
        
        <pre class="out" message="xmpp.presence.offline">
        socket.emit('xmpp.presence.offline')
        </pre>
        
        <h3>Subscribe</h3>
        <p>Request to subsribe to a user</p>
        <pre class="out" message="xmpp.presence.subscribe">
        socket.emit('xmpp.presence.subscribe', {to: 'user@example.com' })
        </pre>
        
        <p>User requests to subscribe to your presence</p>
        <pre class="in" message="xmpp.presence.subscribe">
        socket.on('xmpp.presence.subscribe', function(data) {
            console.log(data);
            /* { 
                   from: 'user@example.com'
                   nick: 'Example user' // ...optional...
               } */
        })
        </pre>
        
        <p>Respond with subscribed or unsubscribed</p>
        <pre class="out" message="xmpp.presence.subscribed">
        socket.emit('xmpp.presence.subscribed', { to: 'user@example.com' })
        </pre>
        <pre class="out" messsage="xmpp.presence.unsubscribed">
        socket.emit('xmpp.presence.unsubscribed', { to: 'user@example.com' })
        </pre>
        
        <h2>Roster</h2>
        
        <h3>Add user to roster</h3>
        
        <pre class="out callback" message="xmpp.roster.add">
        socket.emit(
            'xmpp.roster.add',
            {},
            function(reply) { 
                if (reply.error) console.log(reply.error);
            }
        )
        </pre>
        <p>Example:</p>
        <pre class="example">
          {
              jid: 'user@example.com',
              name: 'Example user',    // ...optional...
              group: 'example-users'   // ...optional...
          }
        </pre>
        
        <h3>Get</h3>
        
        <pre class="out callback" message="xmpp.roster.get">
        socket.emit(
            'xmpp.roster.get',
            {},
            function(error, roster) { console.log('roster', roster) }
        )
        </pre>
        <p>Data returns as array of objects, e.g.</p>
        <pre class="example">
          [ {
               jid: { node: 'user', domain: 'example.com' },
               subscription: 'both',
               name: 'Example user',
               group: 'Buddies',
               [ ask = 'subscribe' ]
          } ]
        </pre>
        
        <h3>New incoming Roster request</h3>
        
        <pre class="in" message="xmpp.roster.add">
        socket.on('xmpp.roster.add', function(data) {
            console.log(data);
        })
        </pre>
        
        <p>Example:</p>
        <pre class="example">
          {
               jid: { node: 'user', domain: 'example.com' },
               subscription: 'both',
               name: 'Example user',
               group: 'Buddies',
               [ ask = 'subscribe' ]
          }
        </pre>
        
        <h3>Add a user to a roster group</h3>
        
        <pre class="out" message="xmpp.roster.group">
        socket.emit('xmpp.roster.group', { jid: 'user@example.com', group: 'buddies' })
        </pre>
        
        <h2>Multi-user chat (MUC) [XEP-0045]</h2>
        
        <h3>Join a room</h3>
        
        <pre class="out" message="xmpp.muc.join">
        socket.emit('xmpp.muc.join', { room: 'test@conference.evilprofessor.co.uk', nick: 'MyNickname' })
        </pre>
        
        <h3>Receive room roster</h3>
        
        <pre class="in" message="xmpp.muc.roster">
        socket.on('xmpp.muc.roster', function(data) { console.log(data) })
        </pre>
        
        <p>Example: <i>You may receive many of these messages</i></p>
        <pre class="example">
          {
              room: 'test@conference.evilprofessor.co.uk',
              nick: 'TheirNickname',
            [ affiliation: 'member', ]
            [ role: 'member' ]
          }
        </pre>
        
        <p>'Affilition' and 'role' tend to be sent on affiliation or role changes.</p>
         
        <h3>Receive a message</h3>
         
        <pre class="in" message="xmpp.muc.message">
        socket.on('xmpp.muc.message', function(data) { console.log(data) })
        </pre>
        <p>Example:</p>
        <pre class="example">
          {
              room: 'test@conference.evilprofessor.co.uk',
              nick: 'TheirNickname',
              content: 'Hello world!',
            [ timestamp: '2012-03-03T20:22:00Z', ]
            [ private: false ]
          }
        </pre>
        
        <h3>Send a message</h3>
        
        <pre class="out" message="xmpp.muc.message">
        socket.emit(
            'xmpp.muc.message',
            {
                room: 'test@conference.evilprofessor.co.uk',
                content: 'Hello XMPP people!',
              [ to: 'TheirNickname' ]
            }
        </pre>
        <p>If 'to' is provided then message becomes a private message.</p>
        
        <h3>Leave a room</h3>
        
        <pre class="out" message="xmpp.muc.leave">
        socket.emit(
            'xmpp.muc.leave',
            {
                room: 'test@conference.evilprofessor.co.uk'
            }
        )
        </pre>
        
        <h3>Errors</h3>
        
        <h4>Message Errors</h4>
        
        <pre class="in" message="xmpp.muc.error">
        socket.on('xmpp.muc.error', function(data) { console.log(data) })
        </pre>
        <p>Example:</p>
        <pre class="example">
          {
              type:  'message',
              error: 'SERVICE-UNAVAILABLE',
              room:  'test@conference.evilprofessor.co.uk',
            [ content: 'Original message content' ]
          }
        </pre>
        <p>Code will attempt to grab the extended reason from the 
        '<abbr title="urn:ietf:params:xml:ns:xmpp-stanzas">xmpp-stanzas</abbr>' namespaced 
        element, otherwise it will grab the 'type' attribute from the error tag.</p>

        <h3>Change a user's role</h3>
        
        <pre class="out callback" message="xmpp.muc.role">
        socket.emit(
            'xmpp.muc.role', 
            {
                room: 'test@conference.evilprofessor.co.uk',
                nick: 'TheirNickname',
                role: 'participant'
            },
            function(error, success) { console.log(error, success) }
        )
        </pre>
        <p>Success will be true and error `null` if all is ok.</p>
        
        <h3>Change a user's affiliation</h3>
        
        <pre class="out callback" message="xmpp.muc.affiliation">
        socket.emit(
            'xmpp.muc.role',
            {
                room: 'test@conference.evilprofessor.co.uk',
                jid: 'user@example.com',
                affiliation: 'outcast'
            }
            function(error, success) { console.log(error, success) }
        )
        </pre>
        
        <h3>Register with a room</h3>
        
        <h4>Get registration information</h4>
        
        <pre class="out callback" message="xmpp.muc.register.info">
        socket.emit(
            'xmpp.muc.register.info',
            { room: 'test@conference.evilprofessor.co.uk' },
            function(error, info) { console.log(error, info) }
        )
        </pre>
        
        <p>Example:</p>
        <pre class="example">
        {
            'instructions': 'Reply with the following form',
            'form': {
                title: 'Register with the dev room!',
                instructions: 'Please fill out all required fields',
                fields: [
                    {
                        type: 'hidden',
                        value: '',
                        var: 'muc#register_email',
                        required: true,
                        [ label: 'Email address', ]
                ] 
            }
        }
        </pre>
        
        <h4>Perform registration</h4>
        
        <pre class="out callback" message="xmpp.muc.register">
        socket.emit(
            'xmpp.muc.register',
            { room: 'test@conference.evilprofessor.co.uk', form: [ ] },
            function(error, success) { console.log(error, success)
        )
        </pre>

        <h3>Update room configuration</h3>
        
        <h4>Get room configuration</h4>
        
        <pre class="out callback" message="xmpp.muc.room.config.get">
        socket.emit(
            'xmpp.muc.room.config.get',
            { room: 'test@conference.evilprofessor.co.uk' },
            function(error, success) { console.log(error, success) }
        )
        </pre>
        
        <p>Response (can) look like this:</p>
        
        <pre class="example">
        {
            title: "Configuration for test@conference.evilprofessor.co.uk",
            instructions: "Configuration for test@conference.evilprofessor.co.uk",
            form: {
                fields: [
                    { var: "FORM_TYPE", type: "hidden", required: false, value: "http://jabber.org/protocol/muc#roomconfig" },
                    { var: "muc#roomconfig_roomname", type: "text-single", required: false, value: "test2", label: "Name" },
                    { var: "muc#roomconfig_persistentroom", type: "boolean", required: false, value: false, label: "Make Room Persistent?" },
                    { var: "muc#roomconfig_whois", type: "list-single", required: false, value:["moderators", "moderators", "anyone"], label: "Who May Discover Real JIDs?" },
                    { var: "muc#roomconfig_roomsecret", type: "text-private", required: false, value: "", label: "Password" },
                ],
                title: "Configuration for test@conference.evilprofessor.co.uk",
                instructions: "Configuration for test@conference.evilprofessor.co.uk"
          }
        }
        </pre>

        <h4>Set room configurtion</h4>
        
        <pre class="out callback" message="xmpp.muc.room.config.set">
        socket.emit(
            'xmpp.muc.room.config.set',
            { room: 'test@conference.evilprofessor.co.uk', form: [ ] },
            function(error, success) { console.log(error, success) }
        )
        </pre>
        
        <p>Form data example:</p>
        <pre class="example">
        {
            room: 'test@conference.evilprofessor.co.uk',
            form: [
                { field: 'muc#roomconfig_membersonly', value: true },
                { field: 'muc#roomconfig_roomname', value: 'Cool XMPP-FTW configured room' },
                { field: 'muc#roomconfig_roomsecret', value: 'abracadabra' }
            ]
        }
        </pre>
        
        <% include ./partials/ga %>
        <% include ./partials/cat-finder %>
